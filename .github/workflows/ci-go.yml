name: ci-go

on:
  push:
    branches:
      - '**'  # matches every branch
  pull_request:
    branches:
      - '**'  # matches every branch

jobs:
  go-fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2

      - uses: actions/setup-go@v3
        with:
          go-version: v1.20

      - name: Check gofmt
        run: gofmt -s -d $(find . -type f -name '*.go' -print)
        working-directory: src

  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2

      - name: Run Revive Action by pulling pre-built image
        uses: morphy2k/revive-action@v2
        with:
          path: "./src/..."

  go-sec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2

      - uses: actions/setup-go@v3
        with:
          go-version: v1.20

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go get .
          gosec -exclude=G204,G304,G107 -exclude-dir=protobuf/ ./...  
        working-directory: src

  go-ginkgo-test:
    runs-on: ubuntu-latest
    env:
      RUNTIME: ${{ matrix.runtime }}
    strategy:
      fail-fast: false
      matrix:
        runtime: ["docker", "containerd", "crio"]
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2

      - uses: actions/setup-go@v3
        with:
          go-version: v1.20
        
      - name: Setup Enviroment
        run: |  
          # setup kubernetes environment
          ./k3s/install_k3s.sh

      - name: Run KubeArmor in background
        run: |
          curl -sfL http://get.kubearmor.io/ | sudo sh -s -- -b /usr/local/bin
          karmor install

      - name: Build Discovery Engine
        run: |
          GITHUB_SHA=$GITHUB_SHA ./src/build/build_knoxautopolicy.sh
          
      - name: Run Discovery Engine
        run: |
          if [ ${{ matrix.runtime }} == "containerd" ]; then
            docker save accuknox/knoxautopolicy:latest | sudo k3s ctr images import -
          else
            if [ ${{ matrix.runtime }} == "crio" ]; then
              sudo podman pull accuknox/knoxautopolicy:latest
            fi
          fi
          kubectl wait --for=condition=ready --timeout=5m -n accuknox-agents pod 
          kubectl get pods -A

      - name: Install Ginkgo
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Run ginkgo tests
        run: ginkgo -r
        working-directory: tests